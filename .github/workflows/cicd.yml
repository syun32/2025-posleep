name: CI-CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: syun32/posleep
  IMAGE_TAG: prod

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (멀티스테이지 Dockerfile이 빌드까지 처리한다는 전제)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (posleep module)
        uses: docker/build-push-action@v6
        with:
          context: ./posleep
          file: ./posleep/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (to get compose file)
        uses: actions/checkout@v4

      - name: Upload docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}           # -----BEGIN OPENSSH PRIVATE KEY-----
          source: "deploy/docker-compose.yml"
          target: "/opt/posleep/"

      - name: SSH Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd /opt/posleep

            # docker-compose.yml 위치 표준화
            if [ -f /opt/posleep/deploy/docker-compose.yml ]; then
              mv -f /opt/posleep/deploy/docker-compose.yml /opt/posleep/docker-compose.yml
              rmdir /opt/posleep/deploy 2>/dev/null || true
            fi

            # Private repo면 로그인 필요
            if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
              docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
            fi

            # 최신 이미지 pull 후 재기동
            docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            docker compose down || true
            docker compose up -d

            # 오래된 이미지 정리
            docker image prune -f
